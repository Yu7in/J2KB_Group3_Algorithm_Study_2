# -*- coding: utf-8 -*-
"""2579

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ryz0p7utNfgxEi_KZPnHaqgvewhu0CSP
"""

# dp[i] : i를 도착으로 가정할 때, 얻을 수 있는 최대 점수
# 독립 시행이 되는 파트를 찾아야함

# dp[0] = 0
# dp[1] = stair[1]
# dp[2] = stair[1]+stair[2]
# dp[3] = max(stair[1], stair[2]) : 연속 3 계단 불가능
# dp[4] = max(stair[1]+stair[2]+stair[4], stair[1]+stair[3]+stair[4]) = max(dp[i-3]+stair[i-2]+stair[4], dp[i-3]+stair[i-1]+stair[4])
# dp[5] = max(dp[3]+stair[5], dp[2]+stair[3]+stair[5])

def _2579() :
  N = int(input())
  stair = [0]
  for _ in range(N) :
    stair.append(int(input()))
  
  dp = [0]*(N+1)
  dp[0] = 0
  dp[1] = stair[1]
  if N == 1 : return dp[1]
  dp[2] = stair[1]+stair[2]

  for i in range(3, N+1) :
    dp[i] = max(dp[i-3]+stair[i-1]+stair[i], dp[i-2]+stair[i])

  return dp[N]

print(_2579())