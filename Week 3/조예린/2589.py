# -*- coding: utf-8 -*-
"""2589

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V-gCdMTlmF904mOcJGiN8ILcSgo6o7VS
"""

from collections import deque 

Dir = [[-1,0],[1,0],[0,-1],[0,1]]
rows, cols, MAP = 0,0,0

def isValid(dr, dc) :
  return (0 <= dr < rows) and (0 <= dc < cols) 

def BFS(visited, R, C) :
  cnt = 0
  q = deque([(R,C,cnt)])
  visited[R][C] = True

  while q :
    nextR, nextC, cnt = q.popleft() 
    for D in Dir :
      dr = nextR + D[0]
      dc = nextC + D[1]
      if isValid(dr, dc) and MAP[dr][dc] == 'L' and not visited[dr][dc] :
        visited[dr][dc] = True
        q.append((dr, dc, cnt+1))

  return cnt

def _2589() :
  maxCnt = 0
  global rows, cols, MAP

  rows, cols = map(int, input().split()) 
  MAP = [[]*cols for _ in range(rows)]
  for row in range(rows) :
    MAP[row] = list(input())

  for row in range(rows) :
    for col in range(cols) :
      if MAP[row][col] == 'L' :
        visited = [[False]*cols for _ in range(rows)]
        cnt = BFS(visited, row,col)
        maxCnt = max(maxCnt, cnt)

  return maxCnt

print(_2589())